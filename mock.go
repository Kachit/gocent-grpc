// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apiproto

import (
	context "context"
	"github.com/kachit/centrifugo-grpc-api/pkg"
	grpc "google.golang.org/grpc"
	sync "sync"
)

// Ensure, that CentrifugoApiClientMock does implement CentrifugoApiClient.
// If this is not the case, regenerate this file with moq.
var _ pkg.CentrifugoApiClient = &CentrifugoApiClientMock{}

// CentrifugoApiClientMock is a mock implementation of CentrifugoApiClient.
//
//	func TestSomethingThatUsesCentrifugoApiClient(t *testing.T) {
//
//		// make and configure a mocked CentrifugoApiClient
//		mockedCentrifugoApiClient := &CentrifugoApiClientMock{
//			BatchFunc: func(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*BatchResponse, error) {
//				panic("mock out the Batch method")
//			},
//			BlockUserFunc: func(ctx context.Context, in *BlockUserRequest, opts ...grpc.CallOption) (*BlockUserResponse, error) {
//				panic("mock out the BlockUser method")
//			},
//			BroadcastFunc: func(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
//				panic("mock out the Broadcast method")
//			},
//			CancelPushFunc: func(ctx context.Context, in *CancelPushRequest, opts ...grpc.CallOption) (*CancelPushResponse, error) {
//				panic("mock out the CancelPush method")
//			},
//			ChannelsFunc: func(ctx context.Context, in *ChannelsRequest, opts ...grpc.CallOption) (*ChannelsResponse, error) {
//				panic("mock out the Channels method")
//			},
//			ConnectionsFunc: func(ctx context.Context, in *ConnectionsRequest, opts ...grpc.CallOption) (*ConnectionsResponse, error) {
//				panic("mock out the Connections method")
//			},
//			DeleteUserStatusFunc: func(ctx context.Context, in *DeleteUserStatusRequest, opts ...grpc.CallOption) (*DeleteUserStatusResponse, error) {
//				panic("mock out the DeleteUserStatus method")
//			},
//			DeviceListFunc: func(ctx context.Context, in *DeviceListRequest, opts ...grpc.CallOption) (*DeviceListResponse, error) {
//				panic("mock out the DeviceList method")
//			},
//			DeviceRegisterFunc: func(ctx context.Context, in *DeviceRegisterRequest, opts ...grpc.CallOption) (*DeviceRegisterResponse, error) {
//				panic("mock out the DeviceRegister method")
//			},
//			DeviceRemoveFunc: func(ctx context.Context, in *DeviceRemoveRequest, opts ...grpc.CallOption) (*DeviceRemoveResponse, error) {
//				panic("mock out the DeviceRemove method")
//			},
//			DeviceTopicListFunc: func(ctx context.Context, in *DeviceTopicListRequest, opts ...grpc.CallOption) (*DeviceTopicListResponse, error) {
//				panic("mock out the DeviceTopicList method")
//			},
//			DeviceTopicUpdateFunc: func(ctx context.Context, in *DeviceTopicUpdateRequest, opts ...grpc.CallOption) (*DeviceTopicUpdateResponse, error) {
//				panic("mock out the DeviceTopicUpdate method")
//			},
//			DeviceUpdateFunc: func(ctx context.Context, in *DeviceUpdateRequest, opts ...grpc.CallOption) (*DeviceUpdateResponse, error) {
//				panic("mock out the DeviceUpdate method")
//			},
//			DisconnectFunc: func(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
//				panic("mock out the Disconnect method")
//			},
//			GetUserStatusFunc: func(ctx context.Context, in *GetUserStatusRequest, opts ...grpc.CallOption) (*GetUserStatusResponse, error) {
//				panic("mock out the GetUserStatus method")
//			},
//			HistoryFunc: func(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
//				panic("mock out the History method")
//			},
//			HistoryRemoveFunc: func(ctx context.Context, in *HistoryRemoveRequest, opts ...grpc.CallOption) (*HistoryRemoveResponse, error) {
//				panic("mock out the HistoryRemove method")
//			},
//			InfoFunc: func(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
//				panic("mock out the Info method")
//			},
//			InvalidateUserTokensFunc: func(ctx context.Context, in *InvalidateUserTokensRequest, opts ...grpc.CallOption) (*InvalidateUserTokensResponse, error) {
//				panic("mock out the InvalidateUserTokens method")
//			},
//			PresenceFunc: func(ctx context.Context, in *PresenceRequest, opts ...grpc.CallOption) (*PresenceResponse, error) {
//				panic("mock out the Presence method")
//			},
//			PresenceStatsFunc: func(ctx context.Context, in *PresenceStatsRequest, opts ...grpc.CallOption) (*PresenceStatsResponse, error) {
//				panic("mock out the PresenceStats method")
//			},
//			PublishFunc: func(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
//				panic("mock out the Publish method")
//			},
//			RPCFunc: func(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
//				panic("mock out the RPC method")
//			},
//			RefreshFunc: func(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
//				panic("mock out the Refresh method")
//			},
//			RevokeTokenFunc: func(ctx context.Context, in *RevokeTokenRequest, opts ...grpc.CallOption) (*RevokeTokenResponse, error) {
//				panic("mock out the RevokeToken method")
//			},
//			SendPushNotificationFunc: func(ctx context.Context, in *SendPushNotificationRequest, opts ...grpc.CallOption) (*SendPushNotificationResponse, error) {
//				panic("mock out the SendPushNotification method")
//			},
//			SubscribeFunc: func(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
//				panic("mock out the Subscribe method")
//			},
//			UnblockUserFunc: func(ctx context.Context, in *UnblockUserRequest, opts ...grpc.CallOption) (*UnblockUserResponse, error) {
//				panic("mock out the UnblockUser method")
//			},
//			UnsubscribeFunc: func(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
//				panic("mock out the Unsubscribe method")
//			},
//			UpdatePushStatusFunc: func(ctx context.Context, in *UpdatePushStatusRequest, opts ...grpc.CallOption) (*UpdatePushStatusResponse, error) {
//				panic("mock out the UpdatePushStatus method")
//			},
//			UpdateUserStatusFunc: func(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*UpdateUserStatusResponse, error) {
//				panic("mock out the UpdateUserStatus method")
//			},
//			UserTopicListFunc: func(ctx context.Context, in *UserTopicListRequest, opts ...grpc.CallOption) (*UserTopicListResponse, error) {
//				panic("mock out the UserTopicList method")
//			},
//			UserTopicUpdateFunc: func(ctx context.Context, in *UserTopicUpdateRequest, opts ...grpc.CallOption) (*UserTopicUpdateResponse, error) {
//				panic("mock out the UserTopicUpdate method")
//			},
//		}
//
//		// use mockedCentrifugoApiClient in code that requires CentrifugoApiClient
//		// and then make assertions.
//
//	}
type CentrifugoApiClientMock struct {
	// BatchFunc mocks the Batch method.
	BatchFunc func(ctx context.Context, in *pkg.BatchRequest, opts ...grpc.CallOption) (*pkg.BatchResponse, error)

	// BlockUserFunc mocks the BlockUser method.
	BlockUserFunc func(ctx context.Context, in *pkg.BlockUserRequest, opts ...grpc.CallOption) (*pkg.BlockUserResponse, error)

	// BroadcastFunc mocks the Broadcast method.
	BroadcastFunc func(ctx context.Context, in *pkg.BroadcastRequest, opts ...grpc.CallOption) (*pkg.BroadcastResponse, error)

	// CancelPushFunc mocks the CancelPush method.
	CancelPushFunc func(ctx context.Context, in *pkg.CancelPushRequest, opts ...grpc.CallOption) (*pkg.CancelPushResponse, error)

	// ChannelsFunc mocks the Channels method.
	ChannelsFunc func(ctx context.Context, in *pkg.ChannelsRequest, opts ...grpc.CallOption) (*pkg.ChannelsResponse, error)

	// ConnectionsFunc mocks the Connections method.
	ConnectionsFunc func(ctx context.Context, in *pkg.ConnectionsRequest, opts ...grpc.CallOption) (*pkg.ConnectionsResponse, error)

	// DeleteUserStatusFunc mocks the DeleteUserStatus method.
	DeleteUserStatusFunc func(ctx context.Context, in *pkg.DeleteUserStatusRequest, opts ...grpc.CallOption) (*pkg.DeleteUserStatusResponse, error)

	// DeviceListFunc mocks the DeviceList method.
	DeviceListFunc func(ctx context.Context, in *pkg.DeviceListRequest, opts ...grpc.CallOption) (*pkg.DeviceListResponse, error)

	// DeviceRegisterFunc mocks the DeviceRegister method.
	DeviceRegisterFunc func(ctx context.Context, in *pkg.DeviceRegisterRequest, opts ...grpc.CallOption) (*pkg.DeviceRegisterResponse, error)

	// DeviceRemoveFunc mocks the DeviceRemove method.
	DeviceRemoveFunc func(ctx context.Context, in *pkg.DeviceRemoveRequest, opts ...grpc.CallOption) (*pkg.DeviceRemoveResponse, error)

	// DeviceTopicListFunc mocks the DeviceTopicList method.
	DeviceTopicListFunc func(ctx context.Context, in *pkg.DeviceTopicListRequest, opts ...grpc.CallOption) (*pkg.DeviceTopicListResponse, error)

	// DeviceTopicUpdateFunc mocks the DeviceTopicUpdate method.
	DeviceTopicUpdateFunc func(ctx context.Context, in *pkg.DeviceTopicUpdateRequest, opts ...grpc.CallOption) (*pkg.DeviceTopicUpdateResponse, error)

	// DeviceUpdateFunc mocks the DeviceUpdate method.
	DeviceUpdateFunc func(ctx context.Context, in *pkg.DeviceUpdateRequest, opts ...grpc.CallOption) (*pkg.DeviceUpdateResponse, error)

	// DisconnectFunc mocks the Disconnect method.
	DisconnectFunc func(ctx context.Context, in *pkg.DisconnectRequest, opts ...grpc.CallOption) (*pkg.DisconnectResponse, error)

	// GetUserStatusFunc mocks the GetUserStatus method.
	GetUserStatusFunc func(ctx context.Context, in *pkg.GetUserStatusRequest, opts ...grpc.CallOption) (*pkg.GetUserStatusResponse, error)

	// HistoryFunc mocks the History method.
	HistoryFunc func(ctx context.Context, in *pkg.HistoryRequest, opts ...grpc.CallOption) (*pkg.HistoryResponse, error)

	// HistoryRemoveFunc mocks the HistoryRemove method.
	HistoryRemoveFunc func(ctx context.Context, in *pkg.HistoryRemoveRequest, opts ...grpc.CallOption) (*pkg.HistoryRemoveResponse, error)

	// InfoFunc mocks the Info method.
	InfoFunc func(ctx context.Context, in *pkg.InfoRequest, opts ...grpc.CallOption) (*pkg.InfoResponse, error)

	// InvalidateUserTokensFunc mocks the InvalidateUserTokens method.
	InvalidateUserTokensFunc func(ctx context.Context, in *pkg.InvalidateUserTokensRequest, opts ...grpc.CallOption) (*pkg.InvalidateUserTokensResponse, error)

	// PresenceFunc mocks the Presence method.
	PresenceFunc func(ctx context.Context, in *pkg.PresenceRequest, opts ...grpc.CallOption) (*pkg.PresenceResponse, error)

	// PresenceStatsFunc mocks the PresenceStats method.
	PresenceStatsFunc func(ctx context.Context, in *pkg.PresenceStatsRequest, opts ...grpc.CallOption) (*pkg.PresenceStatsResponse, error)

	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, in *pkg.PublishRequest, opts ...grpc.CallOption) (*pkg.PublishResponse, error)

	// RPCFunc mocks the RPC method.
	RPCFunc func(ctx context.Context, in *pkg.RPCRequest, opts ...grpc.CallOption) (*pkg.RPCResponse, error)

	// RefreshFunc mocks the Refresh method.
	RefreshFunc func(ctx context.Context, in *pkg.RefreshRequest, opts ...grpc.CallOption) (*pkg.RefreshResponse, error)

	// RevokeTokenFunc mocks the RevokeToken method.
	RevokeTokenFunc func(ctx context.Context, in *pkg.RevokeTokenRequest, opts ...grpc.CallOption) (*pkg.RevokeTokenResponse, error)

	// SendPushNotificationFunc mocks the SendPushNotification method.
	SendPushNotificationFunc func(ctx context.Context, in *pkg.SendPushNotificationRequest, opts ...grpc.CallOption) (*pkg.SendPushNotificationResponse, error)

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, in *pkg.SubscribeRequest, opts ...grpc.CallOption) (*pkg.SubscribeResponse, error)

	// UnblockUserFunc mocks the UnblockUser method.
	UnblockUserFunc func(ctx context.Context, in *pkg.UnblockUserRequest, opts ...grpc.CallOption) (*pkg.UnblockUserResponse, error)

	// UnsubscribeFunc mocks the Unsubscribe method.
	UnsubscribeFunc func(ctx context.Context, in *pkg.UnsubscribeRequest, opts ...grpc.CallOption) (*pkg.UnsubscribeResponse, error)

	// UpdatePushStatusFunc mocks the UpdatePushStatus method.
	UpdatePushStatusFunc func(ctx context.Context, in *pkg.UpdatePushStatusRequest, opts ...grpc.CallOption) (*pkg.UpdatePushStatusResponse, error)

	// UpdateUserStatusFunc mocks the UpdateUserStatus method.
	UpdateUserStatusFunc func(ctx context.Context, in *pkg.UpdateUserStatusRequest, opts ...grpc.CallOption) (*pkg.UpdateUserStatusResponse, error)

	// UserTopicListFunc mocks the UserTopicList method.
	UserTopicListFunc func(ctx context.Context, in *pkg.UserTopicListRequest, opts ...grpc.CallOption) (*pkg.UserTopicListResponse, error)

	// UserTopicUpdateFunc mocks the UserTopicUpdate method.
	UserTopicUpdateFunc func(ctx context.Context, in *pkg.UserTopicUpdateRequest, opts ...grpc.CallOption) (*pkg.UserTopicUpdateResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Batch holds details about calls to the Batch method.
		Batch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.BatchRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// BlockUser holds details about calls to the BlockUser method.
		BlockUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.BlockUserRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Broadcast holds details about calls to the Broadcast method.
		Broadcast []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.BroadcastRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// CancelPush holds details about calls to the CancelPush method.
		CancelPush []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.CancelPushRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Channels holds details about calls to the Channels method.
		Channels []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.ChannelsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Connections holds details about calls to the Connections method.
		Connections []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.ConnectionsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeleteUserStatus holds details about calls to the DeleteUserStatus method.
		DeleteUserStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.DeleteUserStatusRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeviceList holds details about calls to the DeviceList method.
		DeviceList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.DeviceListRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeviceRegister holds details about calls to the DeviceRegister method.
		DeviceRegister []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.DeviceRegisterRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeviceRemove holds details about calls to the DeviceRemove method.
		DeviceRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.DeviceRemoveRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeviceTopicList holds details about calls to the DeviceTopicList method.
		DeviceTopicList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.DeviceTopicListRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeviceTopicUpdate holds details about calls to the DeviceTopicUpdate method.
		DeviceTopicUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.DeviceTopicUpdateRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// DeviceUpdate holds details about calls to the DeviceUpdate method.
		DeviceUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.DeviceUpdateRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Disconnect holds details about calls to the Disconnect method.
		Disconnect []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.DisconnectRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// GetUserStatus holds details about calls to the GetUserStatus method.
		GetUserStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.GetUserStatusRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// History holds details about calls to the History method.
		History []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.HistoryRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// HistoryRemove holds details about calls to the HistoryRemove method.
		HistoryRemove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.HistoryRemoveRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Info holds details about calls to the Info method.
		Info []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.InfoRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// InvalidateUserTokens holds details about calls to the InvalidateUserTokens method.
		InvalidateUserTokens []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.InvalidateUserTokensRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Presence holds details about calls to the Presence method.
		Presence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.PresenceRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// PresenceStats holds details about calls to the PresenceStats method.
		PresenceStats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.PresenceStatsRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.PublishRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// RPC holds details about calls to the RPC method.
		RPC []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.RPCRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Refresh holds details about calls to the Refresh method.
		Refresh []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.RefreshRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// RevokeToken holds details about calls to the RevokeToken method.
		RevokeToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.RevokeTokenRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// SendPushNotification holds details about calls to the SendPushNotification method.
		SendPushNotification []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.SendPushNotificationRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.SubscribeRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UnblockUser holds details about calls to the UnblockUser method.
		UnblockUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.UnblockUserRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Unsubscribe holds details about calls to the Unsubscribe method.
		Unsubscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.UnsubscribeRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UpdatePushStatus holds details about calls to the UpdatePushStatus method.
		UpdatePushStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.UpdatePushStatusRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UpdateUserStatus holds details about calls to the UpdateUserStatus method.
		UpdateUserStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.UpdateUserStatusRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UserTopicList holds details about calls to the UserTopicList method.
		UserTopicList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.UserTopicListRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// UserTopicUpdate holds details about calls to the UserTopicUpdate method.
		UserTopicUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *pkg.UserTopicUpdateRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockBatch                sync.RWMutex
	lockBlockUser            sync.RWMutex
	lockBroadcast            sync.RWMutex
	lockCancelPush           sync.RWMutex
	lockChannels             sync.RWMutex
	lockConnections          sync.RWMutex
	lockDeleteUserStatus     sync.RWMutex
	lockDeviceList           sync.RWMutex
	lockDeviceRegister       sync.RWMutex
	lockDeviceRemove         sync.RWMutex
	lockDeviceTopicList      sync.RWMutex
	lockDeviceTopicUpdate    sync.RWMutex
	lockDeviceUpdate         sync.RWMutex
	lockDisconnect           sync.RWMutex
	lockGetUserStatus        sync.RWMutex
	lockHistory              sync.RWMutex
	lockHistoryRemove        sync.RWMutex
	lockInfo                 sync.RWMutex
	lockInvalidateUserTokens sync.RWMutex
	lockPresence             sync.RWMutex
	lockPresenceStats        sync.RWMutex
	lockPublish              sync.RWMutex
	lockRPC                  sync.RWMutex
	lockRefresh              sync.RWMutex
	lockRevokeToken          sync.RWMutex
	lockSendPushNotification sync.RWMutex
	lockSubscribe            sync.RWMutex
	lockUnblockUser          sync.RWMutex
	lockUnsubscribe          sync.RWMutex
	lockUpdatePushStatus     sync.RWMutex
	lockUpdateUserStatus     sync.RWMutex
	lockUserTopicList        sync.RWMutex
	lockUserTopicUpdate      sync.RWMutex
}

// Batch calls BatchFunc.
func (mock *CentrifugoApiClientMock) Batch(ctx context.Context, in *pkg.BatchRequest, opts ...grpc.CallOption) (*pkg.BatchResponse, error) {
	if mock.BatchFunc == nil {
		panic("CentrifugoApiClientMock.BatchFunc: method is nil but CentrifugoApiClient.Batch was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.BatchRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockBatch.Lock()
	mock.calls.Batch = append(mock.calls.Batch, callInfo)
	mock.lockBatch.Unlock()
	return mock.BatchFunc(ctx, in, opts...)
}

// BatchCalls gets all the calls that were made to Batch.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.BatchCalls())
func (mock *CentrifugoApiClientMock) BatchCalls() []struct {
	Ctx  context.Context
	In   *pkg.BatchRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.BatchRequest
		Opts []grpc.CallOption
	}
	mock.lockBatch.RLock()
	calls = mock.calls.Batch
	mock.lockBatch.RUnlock()
	return calls
}

// BlockUser calls BlockUserFunc.
func (mock *CentrifugoApiClientMock) BlockUser(ctx context.Context, in *pkg.BlockUserRequest, opts ...grpc.CallOption) (*pkg.BlockUserResponse, error) {
	if mock.BlockUserFunc == nil {
		panic("CentrifugoApiClientMock.BlockUserFunc: method is nil but CentrifugoApiClient.BlockUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.BlockUserRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockBlockUser.Lock()
	mock.calls.BlockUser = append(mock.calls.BlockUser, callInfo)
	mock.lockBlockUser.Unlock()
	return mock.BlockUserFunc(ctx, in, opts...)
}

// BlockUserCalls gets all the calls that were made to BlockUser.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.BlockUserCalls())
func (mock *CentrifugoApiClientMock) BlockUserCalls() []struct {
	Ctx  context.Context
	In   *pkg.BlockUserRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.BlockUserRequest
		Opts []grpc.CallOption
	}
	mock.lockBlockUser.RLock()
	calls = mock.calls.BlockUser
	mock.lockBlockUser.RUnlock()
	return calls
}

// Broadcast calls BroadcastFunc.
func (mock *CentrifugoApiClientMock) Broadcast(ctx context.Context, in *pkg.BroadcastRequest, opts ...grpc.CallOption) (*pkg.BroadcastResponse, error) {
	if mock.BroadcastFunc == nil {
		panic("CentrifugoApiClientMock.BroadcastFunc: method is nil but CentrifugoApiClient.Broadcast was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.BroadcastRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockBroadcast.Lock()
	mock.calls.Broadcast = append(mock.calls.Broadcast, callInfo)
	mock.lockBroadcast.Unlock()
	return mock.BroadcastFunc(ctx, in, opts...)
}

// BroadcastCalls gets all the calls that were made to Broadcast.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.BroadcastCalls())
func (mock *CentrifugoApiClientMock) BroadcastCalls() []struct {
	Ctx  context.Context
	In   *pkg.BroadcastRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.BroadcastRequest
		Opts []grpc.CallOption
	}
	mock.lockBroadcast.RLock()
	calls = mock.calls.Broadcast
	mock.lockBroadcast.RUnlock()
	return calls
}

// CancelPush calls CancelPushFunc.
func (mock *CentrifugoApiClientMock) CancelPush(ctx context.Context, in *pkg.CancelPushRequest, opts ...grpc.CallOption) (*pkg.CancelPushResponse, error) {
	if mock.CancelPushFunc == nil {
		panic("CentrifugoApiClientMock.CancelPushFunc: method is nil but CentrifugoApiClient.CancelPush was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.CancelPushRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockCancelPush.Lock()
	mock.calls.CancelPush = append(mock.calls.CancelPush, callInfo)
	mock.lockCancelPush.Unlock()
	return mock.CancelPushFunc(ctx, in, opts...)
}

// CancelPushCalls gets all the calls that were made to CancelPush.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.CancelPushCalls())
func (mock *CentrifugoApiClientMock) CancelPushCalls() []struct {
	Ctx  context.Context
	In   *pkg.CancelPushRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.CancelPushRequest
		Opts []grpc.CallOption
	}
	mock.lockCancelPush.RLock()
	calls = mock.calls.CancelPush
	mock.lockCancelPush.RUnlock()
	return calls
}

// Channels calls ChannelsFunc.
func (mock *CentrifugoApiClientMock) Channels(ctx context.Context, in *pkg.ChannelsRequest, opts ...grpc.CallOption) (*pkg.ChannelsResponse, error) {
	if mock.ChannelsFunc == nil {
		panic("CentrifugoApiClientMock.ChannelsFunc: method is nil but CentrifugoApiClient.Channels was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.ChannelsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockChannels.Lock()
	mock.calls.Channels = append(mock.calls.Channels, callInfo)
	mock.lockChannels.Unlock()
	return mock.ChannelsFunc(ctx, in, opts...)
}

// ChannelsCalls gets all the calls that were made to Channels.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.ChannelsCalls())
func (mock *CentrifugoApiClientMock) ChannelsCalls() []struct {
	Ctx  context.Context
	In   *pkg.ChannelsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.ChannelsRequest
		Opts []grpc.CallOption
	}
	mock.lockChannels.RLock()
	calls = mock.calls.Channels
	mock.lockChannels.RUnlock()
	return calls
}

// Connections calls ConnectionsFunc.
func (mock *CentrifugoApiClientMock) Connections(ctx context.Context, in *pkg.ConnectionsRequest, opts ...grpc.CallOption) (*pkg.ConnectionsResponse, error) {
	if mock.ConnectionsFunc == nil {
		panic("CentrifugoApiClientMock.ConnectionsFunc: method is nil but CentrifugoApiClient.Connections was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.ConnectionsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockConnections.Lock()
	mock.calls.Connections = append(mock.calls.Connections, callInfo)
	mock.lockConnections.Unlock()
	return mock.ConnectionsFunc(ctx, in, opts...)
}

// ConnectionsCalls gets all the calls that were made to Connections.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.ConnectionsCalls())
func (mock *CentrifugoApiClientMock) ConnectionsCalls() []struct {
	Ctx  context.Context
	In   *pkg.ConnectionsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.ConnectionsRequest
		Opts []grpc.CallOption
	}
	mock.lockConnections.RLock()
	calls = mock.calls.Connections
	mock.lockConnections.RUnlock()
	return calls
}

// DeleteUserStatus calls DeleteUserStatusFunc.
func (mock *CentrifugoApiClientMock) DeleteUserStatus(ctx context.Context, in *pkg.DeleteUserStatusRequest, opts ...grpc.CallOption) (*pkg.DeleteUserStatusResponse, error) {
	if mock.DeleteUserStatusFunc == nil {
		panic("CentrifugoApiClientMock.DeleteUserStatusFunc: method is nil but CentrifugoApiClient.DeleteUserStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.DeleteUserStatusRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeleteUserStatus.Lock()
	mock.calls.DeleteUserStatus = append(mock.calls.DeleteUserStatus, callInfo)
	mock.lockDeleteUserStatus.Unlock()
	return mock.DeleteUserStatusFunc(ctx, in, opts...)
}

// DeleteUserStatusCalls gets all the calls that were made to DeleteUserStatus.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.DeleteUserStatusCalls())
func (mock *CentrifugoApiClientMock) DeleteUserStatusCalls() []struct {
	Ctx  context.Context
	In   *pkg.DeleteUserStatusRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.DeleteUserStatusRequest
		Opts []grpc.CallOption
	}
	mock.lockDeleteUserStatus.RLock()
	calls = mock.calls.DeleteUserStatus
	mock.lockDeleteUserStatus.RUnlock()
	return calls
}

// DeviceList calls DeviceListFunc.
func (mock *CentrifugoApiClientMock) DeviceList(ctx context.Context, in *pkg.DeviceListRequest, opts ...grpc.CallOption) (*pkg.DeviceListResponse, error) {
	if mock.DeviceListFunc == nil {
		panic("CentrifugoApiClientMock.DeviceListFunc: method is nil but CentrifugoApiClient.DeviceList was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.DeviceListRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeviceList.Lock()
	mock.calls.DeviceList = append(mock.calls.DeviceList, callInfo)
	mock.lockDeviceList.Unlock()
	return mock.DeviceListFunc(ctx, in, opts...)
}

// DeviceListCalls gets all the calls that were made to DeviceList.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.DeviceListCalls())
func (mock *CentrifugoApiClientMock) DeviceListCalls() []struct {
	Ctx  context.Context
	In   *pkg.DeviceListRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.DeviceListRequest
		Opts []grpc.CallOption
	}
	mock.lockDeviceList.RLock()
	calls = mock.calls.DeviceList
	mock.lockDeviceList.RUnlock()
	return calls
}

// DeviceRegister calls DeviceRegisterFunc.
func (mock *CentrifugoApiClientMock) DeviceRegister(ctx context.Context, in *pkg.DeviceRegisterRequest, opts ...grpc.CallOption) (*pkg.DeviceRegisterResponse, error) {
	if mock.DeviceRegisterFunc == nil {
		panic("CentrifugoApiClientMock.DeviceRegisterFunc: method is nil but CentrifugoApiClient.DeviceRegister was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.DeviceRegisterRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeviceRegister.Lock()
	mock.calls.DeviceRegister = append(mock.calls.DeviceRegister, callInfo)
	mock.lockDeviceRegister.Unlock()
	return mock.DeviceRegisterFunc(ctx, in, opts...)
}

// DeviceRegisterCalls gets all the calls that were made to DeviceRegister.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.DeviceRegisterCalls())
func (mock *CentrifugoApiClientMock) DeviceRegisterCalls() []struct {
	Ctx  context.Context
	In   *pkg.DeviceRegisterRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.DeviceRegisterRequest
		Opts []grpc.CallOption
	}
	mock.lockDeviceRegister.RLock()
	calls = mock.calls.DeviceRegister
	mock.lockDeviceRegister.RUnlock()
	return calls
}

// DeviceRemove calls DeviceRemoveFunc.
func (mock *CentrifugoApiClientMock) DeviceRemove(ctx context.Context, in *pkg.DeviceRemoveRequest, opts ...grpc.CallOption) (*pkg.DeviceRemoveResponse, error) {
	if mock.DeviceRemoveFunc == nil {
		panic("CentrifugoApiClientMock.DeviceRemoveFunc: method is nil but CentrifugoApiClient.DeviceRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.DeviceRemoveRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeviceRemove.Lock()
	mock.calls.DeviceRemove = append(mock.calls.DeviceRemove, callInfo)
	mock.lockDeviceRemove.Unlock()
	return mock.DeviceRemoveFunc(ctx, in, opts...)
}

// DeviceRemoveCalls gets all the calls that were made to DeviceRemove.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.DeviceRemoveCalls())
func (mock *CentrifugoApiClientMock) DeviceRemoveCalls() []struct {
	Ctx  context.Context
	In   *pkg.DeviceRemoveRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.DeviceRemoveRequest
		Opts []grpc.CallOption
	}
	mock.lockDeviceRemove.RLock()
	calls = mock.calls.DeviceRemove
	mock.lockDeviceRemove.RUnlock()
	return calls
}

// DeviceTopicList calls DeviceTopicListFunc.
func (mock *CentrifugoApiClientMock) DeviceTopicList(ctx context.Context, in *pkg.DeviceTopicListRequest, opts ...grpc.CallOption) (*pkg.DeviceTopicListResponse, error) {
	if mock.DeviceTopicListFunc == nil {
		panic("CentrifugoApiClientMock.DeviceTopicListFunc: method is nil but CentrifugoApiClient.DeviceTopicList was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.DeviceTopicListRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeviceTopicList.Lock()
	mock.calls.DeviceTopicList = append(mock.calls.DeviceTopicList, callInfo)
	mock.lockDeviceTopicList.Unlock()
	return mock.DeviceTopicListFunc(ctx, in, opts...)
}

// DeviceTopicListCalls gets all the calls that were made to DeviceTopicList.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.DeviceTopicListCalls())
func (mock *CentrifugoApiClientMock) DeviceTopicListCalls() []struct {
	Ctx  context.Context
	In   *pkg.DeviceTopicListRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.DeviceTopicListRequest
		Opts []grpc.CallOption
	}
	mock.lockDeviceTopicList.RLock()
	calls = mock.calls.DeviceTopicList
	mock.lockDeviceTopicList.RUnlock()
	return calls
}

// DeviceTopicUpdate calls DeviceTopicUpdateFunc.
func (mock *CentrifugoApiClientMock) DeviceTopicUpdate(ctx context.Context, in *pkg.DeviceTopicUpdateRequest, opts ...grpc.CallOption) (*pkg.DeviceTopicUpdateResponse, error) {
	if mock.DeviceTopicUpdateFunc == nil {
		panic("CentrifugoApiClientMock.DeviceTopicUpdateFunc: method is nil but CentrifugoApiClient.DeviceTopicUpdate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.DeviceTopicUpdateRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeviceTopicUpdate.Lock()
	mock.calls.DeviceTopicUpdate = append(mock.calls.DeviceTopicUpdate, callInfo)
	mock.lockDeviceTopicUpdate.Unlock()
	return mock.DeviceTopicUpdateFunc(ctx, in, opts...)
}

// DeviceTopicUpdateCalls gets all the calls that were made to DeviceTopicUpdate.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.DeviceTopicUpdateCalls())
func (mock *CentrifugoApiClientMock) DeviceTopicUpdateCalls() []struct {
	Ctx  context.Context
	In   *pkg.DeviceTopicUpdateRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.DeviceTopicUpdateRequest
		Opts []grpc.CallOption
	}
	mock.lockDeviceTopicUpdate.RLock()
	calls = mock.calls.DeviceTopicUpdate
	mock.lockDeviceTopicUpdate.RUnlock()
	return calls
}

// DeviceUpdate calls DeviceUpdateFunc.
func (mock *CentrifugoApiClientMock) DeviceUpdate(ctx context.Context, in *pkg.DeviceUpdateRequest, opts ...grpc.CallOption) (*pkg.DeviceUpdateResponse, error) {
	if mock.DeviceUpdateFunc == nil {
		panic("CentrifugoApiClientMock.DeviceUpdateFunc: method is nil but CentrifugoApiClient.DeviceUpdate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.DeviceUpdateRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDeviceUpdate.Lock()
	mock.calls.DeviceUpdate = append(mock.calls.DeviceUpdate, callInfo)
	mock.lockDeviceUpdate.Unlock()
	return mock.DeviceUpdateFunc(ctx, in, opts...)
}

// DeviceUpdateCalls gets all the calls that were made to DeviceUpdate.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.DeviceUpdateCalls())
func (mock *CentrifugoApiClientMock) DeviceUpdateCalls() []struct {
	Ctx  context.Context
	In   *pkg.DeviceUpdateRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.DeviceUpdateRequest
		Opts []grpc.CallOption
	}
	mock.lockDeviceUpdate.RLock()
	calls = mock.calls.DeviceUpdate
	mock.lockDeviceUpdate.RUnlock()
	return calls
}

// Disconnect calls DisconnectFunc.
func (mock *CentrifugoApiClientMock) Disconnect(ctx context.Context, in *pkg.DisconnectRequest, opts ...grpc.CallOption) (*pkg.DisconnectResponse, error) {
	if mock.DisconnectFunc == nil {
		panic("CentrifugoApiClientMock.DisconnectFunc: method is nil but CentrifugoApiClient.Disconnect was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.DisconnectRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockDisconnect.Lock()
	mock.calls.Disconnect = append(mock.calls.Disconnect, callInfo)
	mock.lockDisconnect.Unlock()
	return mock.DisconnectFunc(ctx, in, opts...)
}

// DisconnectCalls gets all the calls that were made to Disconnect.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.DisconnectCalls())
func (mock *CentrifugoApiClientMock) DisconnectCalls() []struct {
	Ctx  context.Context
	In   *pkg.DisconnectRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.DisconnectRequest
		Opts []grpc.CallOption
	}
	mock.lockDisconnect.RLock()
	calls = mock.calls.Disconnect
	mock.lockDisconnect.RUnlock()
	return calls
}

// GetUserStatus calls GetUserStatusFunc.
func (mock *CentrifugoApiClientMock) GetUserStatus(ctx context.Context, in *pkg.GetUserStatusRequest, opts ...grpc.CallOption) (*pkg.GetUserStatusResponse, error) {
	if mock.GetUserStatusFunc == nil {
		panic("CentrifugoApiClientMock.GetUserStatusFunc: method is nil but CentrifugoApiClient.GetUserStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.GetUserStatusRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetUserStatus.Lock()
	mock.calls.GetUserStatus = append(mock.calls.GetUserStatus, callInfo)
	mock.lockGetUserStatus.Unlock()
	return mock.GetUserStatusFunc(ctx, in, opts...)
}

// GetUserStatusCalls gets all the calls that were made to GetUserStatus.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.GetUserStatusCalls())
func (mock *CentrifugoApiClientMock) GetUserStatusCalls() []struct {
	Ctx  context.Context
	In   *pkg.GetUserStatusRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.GetUserStatusRequest
		Opts []grpc.CallOption
	}
	mock.lockGetUserStatus.RLock()
	calls = mock.calls.GetUserStatus
	mock.lockGetUserStatus.RUnlock()
	return calls
}

// History calls HistoryFunc.
func (mock *CentrifugoApiClientMock) History(ctx context.Context, in *pkg.HistoryRequest, opts ...grpc.CallOption) (*pkg.HistoryResponse, error) {
	if mock.HistoryFunc == nil {
		panic("CentrifugoApiClientMock.HistoryFunc: method is nil but CentrifugoApiClient.History was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.HistoryRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockHistory.Lock()
	mock.calls.History = append(mock.calls.History, callInfo)
	mock.lockHistory.Unlock()
	return mock.HistoryFunc(ctx, in, opts...)
}

// HistoryCalls gets all the calls that were made to History.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.HistoryCalls())
func (mock *CentrifugoApiClientMock) HistoryCalls() []struct {
	Ctx  context.Context
	In   *pkg.HistoryRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.HistoryRequest
		Opts []grpc.CallOption
	}
	mock.lockHistory.RLock()
	calls = mock.calls.History
	mock.lockHistory.RUnlock()
	return calls
}

// HistoryRemove calls HistoryRemoveFunc.
func (mock *CentrifugoApiClientMock) HistoryRemove(ctx context.Context, in *pkg.HistoryRemoveRequest, opts ...grpc.CallOption) (*pkg.HistoryRemoveResponse, error) {
	if mock.HistoryRemoveFunc == nil {
		panic("CentrifugoApiClientMock.HistoryRemoveFunc: method is nil but CentrifugoApiClient.HistoryRemove was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.HistoryRemoveRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockHistoryRemove.Lock()
	mock.calls.HistoryRemove = append(mock.calls.HistoryRemove, callInfo)
	mock.lockHistoryRemove.Unlock()
	return mock.HistoryRemoveFunc(ctx, in, opts...)
}

// HistoryRemoveCalls gets all the calls that were made to HistoryRemove.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.HistoryRemoveCalls())
func (mock *CentrifugoApiClientMock) HistoryRemoveCalls() []struct {
	Ctx  context.Context
	In   *pkg.HistoryRemoveRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.HistoryRemoveRequest
		Opts []grpc.CallOption
	}
	mock.lockHistoryRemove.RLock()
	calls = mock.calls.HistoryRemove
	mock.lockHistoryRemove.RUnlock()
	return calls
}

// Info calls InfoFunc.
func (mock *CentrifugoApiClientMock) Info(ctx context.Context, in *pkg.InfoRequest, opts ...grpc.CallOption) (*pkg.InfoResponse, error) {
	if mock.InfoFunc == nil {
		panic("CentrifugoApiClientMock.InfoFunc: method is nil but CentrifugoApiClient.Info was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.InfoRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockInfo.Lock()
	mock.calls.Info = append(mock.calls.Info, callInfo)
	mock.lockInfo.Unlock()
	return mock.InfoFunc(ctx, in, opts...)
}

// InfoCalls gets all the calls that were made to Info.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.InfoCalls())
func (mock *CentrifugoApiClientMock) InfoCalls() []struct {
	Ctx  context.Context
	In   *pkg.InfoRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.InfoRequest
		Opts []grpc.CallOption
	}
	mock.lockInfo.RLock()
	calls = mock.calls.Info
	mock.lockInfo.RUnlock()
	return calls
}

// InvalidateUserTokens calls InvalidateUserTokensFunc.
func (mock *CentrifugoApiClientMock) InvalidateUserTokens(ctx context.Context, in *pkg.InvalidateUserTokensRequest, opts ...grpc.CallOption) (*pkg.InvalidateUserTokensResponse, error) {
	if mock.InvalidateUserTokensFunc == nil {
		panic("CentrifugoApiClientMock.InvalidateUserTokensFunc: method is nil but CentrifugoApiClient.InvalidateUserTokens was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.InvalidateUserTokensRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockInvalidateUserTokens.Lock()
	mock.calls.InvalidateUserTokens = append(mock.calls.InvalidateUserTokens, callInfo)
	mock.lockInvalidateUserTokens.Unlock()
	return mock.InvalidateUserTokensFunc(ctx, in, opts...)
}

// InvalidateUserTokensCalls gets all the calls that were made to InvalidateUserTokens.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.InvalidateUserTokensCalls())
func (mock *CentrifugoApiClientMock) InvalidateUserTokensCalls() []struct {
	Ctx  context.Context
	In   *pkg.InvalidateUserTokensRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.InvalidateUserTokensRequest
		Opts []grpc.CallOption
	}
	mock.lockInvalidateUserTokens.RLock()
	calls = mock.calls.InvalidateUserTokens
	mock.lockInvalidateUserTokens.RUnlock()
	return calls
}

// Presence calls PresenceFunc.
func (mock *CentrifugoApiClientMock) Presence(ctx context.Context, in *pkg.PresenceRequest, opts ...grpc.CallOption) (*pkg.PresenceResponse, error) {
	if mock.PresenceFunc == nil {
		panic("CentrifugoApiClientMock.PresenceFunc: method is nil but CentrifugoApiClient.Presence was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.PresenceRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockPresence.Lock()
	mock.calls.Presence = append(mock.calls.Presence, callInfo)
	mock.lockPresence.Unlock()
	return mock.PresenceFunc(ctx, in, opts...)
}

// PresenceCalls gets all the calls that were made to Presence.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.PresenceCalls())
func (mock *CentrifugoApiClientMock) PresenceCalls() []struct {
	Ctx  context.Context
	In   *pkg.PresenceRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.PresenceRequest
		Opts []grpc.CallOption
	}
	mock.lockPresence.RLock()
	calls = mock.calls.Presence
	mock.lockPresence.RUnlock()
	return calls
}

// PresenceStats calls PresenceStatsFunc.
func (mock *CentrifugoApiClientMock) PresenceStats(ctx context.Context, in *pkg.PresenceStatsRequest, opts ...grpc.CallOption) (*pkg.PresenceStatsResponse, error) {
	if mock.PresenceStatsFunc == nil {
		panic("CentrifugoApiClientMock.PresenceStatsFunc: method is nil but CentrifugoApiClient.PresenceStats was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.PresenceStatsRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockPresenceStats.Lock()
	mock.calls.PresenceStats = append(mock.calls.PresenceStats, callInfo)
	mock.lockPresenceStats.Unlock()
	return mock.PresenceStatsFunc(ctx, in, opts...)
}

// PresenceStatsCalls gets all the calls that were made to PresenceStats.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.PresenceStatsCalls())
func (mock *CentrifugoApiClientMock) PresenceStatsCalls() []struct {
	Ctx  context.Context
	In   *pkg.PresenceStatsRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.PresenceStatsRequest
		Opts []grpc.CallOption
	}
	mock.lockPresenceStats.RLock()
	calls = mock.calls.PresenceStats
	mock.lockPresenceStats.RUnlock()
	return calls
}

// Publish calls PublishFunc.
func (mock *CentrifugoApiClientMock) Publish(ctx context.Context, in *pkg.PublishRequest, opts ...grpc.CallOption) (*pkg.PublishResponse, error) {
	if mock.PublishFunc == nil {
		panic("CentrifugoApiClientMock.PublishFunc: method is nil but CentrifugoApiClient.Publish was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.PublishRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, in, opts...)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.PublishCalls())
func (mock *CentrifugoApiClientMock) PublishCalls() []struct {
	Ctx  context.Context
	In   *pkg.PublishRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.PublishRequest
		Opts []grpc.CallOption
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}

// RPC calls RPCFunc.
func (mock *CentrifugoApiClientMock) RPC(ctx context.Context, in *pkg.RPCRequest, opts ...grpc.CallOption) (*pkg.RPCResponse, error) {
	if mock.RPCFunc == nil {
		panic("CentrifugoApiClientMock.RPCFunc: method is nil but CentrifugoApiClient.RPC was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.RPCRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRPC.Lock()
	mock.calls.RPC = append(mock.calls.RPC, callInfo)
	mock.lockRPC.Unlock()
	return mock.RPCFunc(ctx, in, opts...)
}

// RPCCalls gets all the calls that were made to RPC.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.RPCCalls())
func (mock *CentrifugoApiClientMock) RPCCalls() []struct {
	Ctx  context.Context
	In   *pkg.RPCRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.RPCRequest
		Opts []grpc.CallOption
	}
	mock.lockRPC.RLock()
	calls = mock.calls.RPC
	mock.lockRPC.RUnlock()
	return calls
}

// Refresh calls RefreshFunc.
func (mock *CentrifugoApiClientMock) Refresh(ctx context.Context, in *pkg.RefreshRequest, opts ...grpc.CallOption) (*pkg.RefreshResponse, error) {
	if mock.RefreshFunc == nil {
		panic("CentrifugoApiClientMock.RefreshFunc: method is nil but CentrifugoApiClient.Refresh was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.RefreshRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRefresh.Lock()
	mock.calls.Refresh = append(mock.calls.Refresh, callInfo)
	mock.lockRefresh.Unlock()
	return mock.RefreshFunc(ctx, in, opts...)
}

// RefreshCalls gets all the calls that were made to Refresh.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.RefreshCalls())
func (mock *CentrifugoApiClientMock) RefreshCalls() []struct {
	Ctx  context.Context
	In   *pkg.RefreshRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.RefreshRequest
		Opts []grpc.CallOption
	}
	mock.lockRefresh.RLock()
	calls = mock.calls.Refresh
	mock.lockRefresh.RUnlock()
	return calls
}

// RevokeToken calls RevokeTokenFunc.
func (mock *CentrifugoApiClientMock) RevokeToken(ctx context.Context, in *pkg.RevokeTokenRequest, opts ...grpc.CallOption) (*pkg.RevokeTokenResponse, error) {
	if mock.RevokeTokenFunc == nil {
		panic("CentrifugoApiClientMock.RevokeTokenFunc: method is nil but CentrifugoApiClient.RevokeToken was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.RevokeTokenRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRevokeToken.Lock()
	mock.calls.RevokeToken = append(mock.calls.RevokeToken, callInfo)
	mock.lockRevokeToken.Unlock()
	return mock.RevokeTokenFunc(ctx, in, opts...)
}

// RevokeTokenCalls gets all the calls that were made to RevokeToken.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.RevokeTokenCalls())
func (mock *CentrifugoApiClientMock) RevokeTokenCalls() []struct {
	Ctx  context.Context
	In   *pkg.RevokeTokenRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.RevokeTokenRequest
		Opts []grpc.CallOption
	}
	mock.lockRevokeToken.RLock()
	calls = mock.calls.RevokeToken
	mock.lockRevokeToken.RUnlock()
	return calls
}

// SendPushNotification calls SendPushNotificationFunc.
func (mock *CentrifugoApiClientMock) SendPushNotification(ctx context.Context, in *pkg.SendPushNotificationRequest, opts ...grpc.CallOption) (*pkg.SendPushNotificationResponse, error) {
	if mock.SendPushNotificationFunc == nil {
		panic("CentrifugoApiClientMock.SendPushNotificationFunc: method is nil but CentrifugoApiClient.SendPushNotification was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.SendPushNotificationRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSendPushNotification.Lock()
	mock.calls.SendPushNotification = append(mock.calls.SendPushNotification, callInfo)
	mock.lockSendPushNotification.Unlock()
	return mock.SendPushNotificationFunc(ctx, in, opts...)
}

// SendPushNotificationCalls gets all the calls that were made to SendPushNotification.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.SendPushNotificationCalls())
func (mock *CentrifugoApiClientMock) SendPushNotificationCalls() []struct {
	Ctx  context.Context
	In   *pkg.SendPushNotificationRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.SendPushNotificationRequest
		Opts []grpc.CallOption
	}
	mock.lockSendPushNotification.RLock()
	calls = mock.calls.SendPushNotification
	mock.lockSendPushNotification.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *CentrifugoApiClientMock) Subscribe(ctx context.Context, in *pkg.SubscribeRequest, opts ...grpc.CallOption) (*pkg.SubscribeResponse, error) {
	if mock.SubscribeFunc == nil {
		panic("CentrifugoApiClientMock.SubscribeFunc: method is nil but CentrifugoApiClient.Subscribe was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.SubscribeRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, in, opts...)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.SubscribeCalls())
func (mock *CentrifugoApiClientMock) SubscribeCalls() []struct {
	Ctx  context.Context
	In   *pkg.SubscribeRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.SubscribeRequest
		Opts []grpc.CallOption
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}

// UnblockUser calls UnblockUserFunc.
func (mock *CentrifugoApiClientMock) UnblockUser(ctx context.Context, in *pkg.UnblockUserRequest, opts ...grpc.CallOption) (*pkg.UnblockUserResponse, error) {
	if mock.UnblockUserFunc == nil {
		panic("CentrifugoApiClientMock.UnblockUserFunc: method is nil but CentrifugoApiClient.UnblockUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.UnblockUserRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUnblockUser.Lock()
	mock.calls.UnblockUser = append(mock.calls.UnblockUser, callInfo)
	mock.lockUnblockUser.Unlock()
	return mock.UnblockUserFunc(ctx, in, opts...)
}

// UnblockUserCalls gets all the calls that were made to UnblockUser.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.UnblockUserCalls())
func (mock *CentrifugoApiClientMock) UnblockUserCalls() []struct {
	Ctx  context.Context
	In   *pkg.UnblockUserRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.UnblockUserRequest
		Opts []grpc.CallOption
	}
	mock.lockUnblockUser.RLock()
	calls = mock.calls.UnblockUser
	mock.lockUnblockUser.RUnlock()
	return calls
}

// Unsubscribe calls UnsubscribeFunc.
func (mock *CentrifugoApiClientMock) Unsubscribe(ctx context.Context, in *pkg.UnsubscribeRequest, opts ...grpc.CallOption) (*pkg.UnsubscribeResponse, error) {
	if mock.UnsubscribeFunc == nil {
		panic("CentrifugoApiClientMock.UnsubscribeFunc: method is nil but CentrifugoApiClient.Unsubscribe was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.UnsubscribeRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUnsubscribe.Lock()
	mock.calls.Unsubscribe = append(mock.calls.Unsubscribe, callInfo)
	mock.lockUnsubscribe.Unlock()
	return mock.UnsubscribeFunc(ctx, in, opts...)
}

// UnsubscribeCalls gets all the calls that were made to Unsubscribe.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.UnsubscribeCalls())
func (mock *CentrifugoApiClientMock) UnsubscribeCalls() []struct {
	Ctx  context.Context
	In   *pkg.UnsubscribeRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.UnsubscribeRequest
		Opts []grpc.CallOption
	}
	mock.lockUnsubscribe.RLock()
	calls = mock.calls.Unsubscribe
	mock.lockUnsubscribe.RUnlock()
	return calls
}

// UpdatePushStatus calls UpdatePushStatusFunc.
func (mock *CentrifugoApiClientMock) UpdatePushStatus(ctx context.Context, in *pkg.UpdatePushStatusRequest, opts ...grpc.CallOption) (*pkg.UpdatePushStatusResponse, error) {
	if mock.UpdatePushStatusFunc == nil {
		panic("CentrifugoApiClientMock.UpdatePushStatusFunc: method is nil but CentrifugoApiClient.UpdatePushStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.UpdatePushStatusRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdatePushStatus.Lock()
	mock.calls.UpdatePushStatus = append(mock.calls.UpdatePushStatus, callInfo)
	mock.lockUpdatePushStatus.Unlock()
	return mock.UpdatePushStatusFunc(ctx, in, opts...)
}

// UpdatePushStatusCalls gets all the calls that were made to UpdatePushStatus.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.UpdatePushStatusCalls())
func (mock *CentrifugoApiClientMock) UpdatePushStatusCalls() []struct {
	Ctx  context.Context
	In   *pkg.UpdatePushStatusRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.UpdatePushStatusRequest
		Opts []grpc.CallOption
	}
	mock.lockUpdatePushStatus.RLock()
	calls = mock.calls.UpdatePushStatus
	mock.lockUpdatePushStatus.RUnlock()
	return calls
}

// UpdateUserStatus calls UpdateUserStatusFunc.
func (mock *CentrifugoApiClientMock) UpdateUserStatus(ctx context.Context, in *pkg.UpdateUserStatusRequest, opts ...grpc.CallOption) (*pkg.UpdateUserStatusResponse, error) {
	if mock.UpdateUserStatusFunc == nil {
		panic("CentrifugoApiClientMock.UpdateUserStatusFunc: method is nil but CentrifugoApiClient.UpdateUserStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.UpdateUserStatusRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdateUserStatus.Lock()
	mock.calls.UpdateUserStatus = append(mock.calls.UpdateUserStatus, callInfo)
	mock.lockUpdateUserStatus.Unlock()
	return mock.UpdateUserStatusFunc(ctx, in, opts...)
}

// UpdateUserStatusCalls gets all the calls that were made to UpdateUserStatus.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.UpdateUserStatusCalls())
func (mock *CentrifugoApiClientMock) UpdateUserStatusCalls() []struct {
	Ctx  context.Context
	In   *pkg.UpdateUserStatusRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.UpdateUserStatusRequest
		Opts []grpc.CallOption
	}
	mock.lockUpdateUserStatus.RLock()
	calls = mock.calls.UpdateUserStatus
	mock.lockUpdateUserStatus.RUnlock()
	return calls
}

// UserTopicList calls UserTopicListFunc.
func (mock *CentrifugoApiClientMock) UserTopicList(ctx context.Context, in *pkg.UserTopicListRequest, opts ...grpc.CallOption) (*pkg.UserTopicListResponse, error) {
	if mock.UserTopicListFunc == nil {
		panic("CentrifugoApiClientMock.UserTopicListFunc: method is nil but CentrifugoApiClient.UserTopicList was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.UserTopicListRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUserTopicList.Lock()
	mock.calls.UserTopicList = append(mock.calls.UserTopicList, callInfo)
	mock.lockUserTopicList.Unlock()
	return mock.UserTopicListFunc(ctx, in, opts...)
}

// UserTopicListCalls gets all the calls that were made to UserTopicList.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.UserTopicListCalls())
func (mock *CentrifugoApiClientMock) UserTopicListCalls() []struct {
	Ctx  context.Context
	In   *pkg.UserTopicListRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.UserTopicListRequest
		Opts []grpc.CallOption
	}
	mock.lockUserTopicList.RLock()
	calls = mock.calls.UserTopicList
	mock.lockUserTopicList.RUnlock()
	return calls
}

// UserTopicUpdate calls UserTopicUpdateFunc.
func (mock *CentrifugoApiClientMock) UserTopicUpdate(ctx context.Context, in *pkg.UserTopicUpdateRequest, opts ...grpc.CallOption) (*pkg.UserTopicUpdateResponse, error) {
	if mock.UserTopicUpdateFunc == nil {
		panic("CentrifugoApiClientMock.UserTopicUpdateFunc: method is nil but CentrifugoApiClient.UserTopicUpdate was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		In   *pkg.UserTopicUpdateRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUserTopicUpdate.Lock()
	mock.calls.UserTopicUpdate = append(mock.calls.UserTopicUpdate, callInfo)
	mock.lockUserTopicUpdate.Unlock()
	return mock.UserTopicUpdateFunc(ctx, in, opts...)
}

// UserTopicUpdateCalls gets all the calls that were made to UserTopicUpdate.
// Check the length with:
//
//	len(mockedCentrifugoApiClient.UserTopicUpdateCalls())
func (mock *CentrifugoApiClientMock) UserTopicUpdateCalls() []struct {
	Ctx  context.Context
	In   *pkg.UserTopicUpdateRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *pkg.UserTopicUpdateRequest
		Opts []grpc.CallOption
	}
	mock.lockUserTopicUpdate.RLock()
	calls = mock.calls.UserTopicUpdate
	mock.lockUserTopicUpdate.RUnlock()
	return calls
}
